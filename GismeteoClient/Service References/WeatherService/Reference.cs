//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GismeteoClient.WeatherService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WeatherService.IWService")]
    public interface IWService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWService/GetCityName", ReplyAction="http://tempuri.org/IWService/GetCityNameResponse")]
        string GetCityName(int cityID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWService/GetCityName", ReplyAction="http://tempuri.org/IWService/GetCityNameResponse")]
        System.Threading.Tasks.Task<string> GetCityNameAsync(int cityID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWService/GetCityId", ReplyAction="http://tempuri.org/IWService/GetCityIdResponse")]
        int GetCityId(string cityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWService/GetCityId", ReplyAction="http://tempuri.org/IWService/GetCityIdResponse")]
        System.Threading.Tasks.Task<int> GetCityIdAsync(string cityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWService/GetAllCities", ReplyAction="http://tempuri.org/IWService/GetAllCitiesResponse")]
        System.Collections.Generic.Dictionary<int, string> GetAllCities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWService/GetAllCities", ReplyAction="http://tempuri.org/IWService/GetAllCitiesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetAllCitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWService/GetWeather", ReplyAction="http://tempuri.org/IWService/GetWeatherResponse")]
        Weather.WeatherItem GetWeather(int id, System.DateTime date, Weather.DayPart part);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWService/GetWeather", ReplyAction="http://tempuri.org/IWService/GetWeatherResponse")]
        System.Threading.Tasks.Task<Weather.WeatherItem> GetWeatherAsync(int id, System.DateTime date, Weather.DayPart part);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWService/CheckConnection", ReplyAction="http://tempuri.org/IWService/CheckConnectionResponse")]
        bool CheckConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWService/CheckConnection", ReplyAction="http://tempuri.org/IWService/CheckConnectionResponse")]
        System.Threading.Tasks.Task<bool> CheckConnectionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWServiceChannel : GismeteoClient.WeatherService.IWService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WServiceClient : System.ServiceModel.ClientBase<GismeteoClient.WeatherService.IWService>, GismeteoClient.WeatherService.IWService {
        
        public WServiceClient() {
        }
        
        public WServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetCityName(int cityID) {
            return base.Channel.GetCityName(cityID);
        }
        
        public System.Threading.Tasks.Task<string> GetCityNameAsync(int cityID) {
            return base.Channel.GetCityNameAsync(cityID);
        }
        
        public int GetCityId(string cityName) {
            return base.Channel.GetCityId(cityName);
        }
        
        public System.Threading.Tasks.Task<int> GetCityIdAsync(string cityName) {
            return base.Channel.GetCityIdAsync(cityName);
        }
        
        public System.Collections.Generic.Dictionary<int, string> GetAllCities() {
            return base.Channel.GetAllCities();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetAllCitiesAsync() {
            return base.Channel.GetAllCitiesAsync();
        }
        
        public Weather.WeatherItem GetWeather(int id, System.DateTime date, Weather.DayPart part) {
            return base.Channel.GetWeather(id, date, part);
        }
        
        public System.Threading.Tasks.Task<Weather.WeatherItem> GetWeatherAsync(int id, System.DateTime date, Weather.DayPart part) {
            return base.Channel.GetWeatherAsync(id, date, part);
        }
        
        public bool CheckConnection() {
            return base.Channel.CheckConnection();
        }
        
        public System.Threading.Tasks.Task<bool> CheckConnectionAsync() {
            return base.Channel.CheckConnectionAsync();
        }
    }
}
